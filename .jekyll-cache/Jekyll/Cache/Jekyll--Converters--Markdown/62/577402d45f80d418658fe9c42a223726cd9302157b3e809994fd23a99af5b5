I"K?<h2 id="chapter5-cpu-scheduling">Chapter5. CPU Scheduling</h2>

<h3 id="cpui-o-버스트-사이클">CPU/I-O 버스트 사이클</h3>

<p><img src="/assets/images/posts/os/2022-03-23-5-1.png" alt="스케줄링1" /></p>

<ul>
  <li>프로세스의 실행은 CPU 실행과 I/O 대기의 사이클로 구성</li>
  <li>I/O bound job: CPU burst time이 짧고 I/O burst가 빈번히 일어나는 작업</li>
  <li>CPU bound job: CPU burst time이 긴 작업</li>
</ul>

<h2 id="cpu-scheduling">CPU Scheduling</h2>

<h3 id="cpu-scheduling이란-">CPU Scheduling이란 ?</h3>

<ul>
  <li>CPU를 누구한테 먼저 줄 것인가, 줬으면 언제 다시 뺏을 건인가를 정하는 알고리즘</li>
  <li>상황에 맞게 CPU를 어떤 프로세스에 배정하여 효율적으로 처리하는지가 중요</li>
</ul>

<h3 id="dispatcher">Dispatcher</h3>

<ul>
  <li>CPU의 제어권을 CPU 스케쥴러에 의해 선택된 프로세스에게 넘긴다.</li>
  <li>이 과정이 문맥 교환</li>
</ul>

<h3 id="cpu-스케쥴링이-필요한-경우">CPU 스케쥴링이 필요한 경우</h3>

<ol>
  <li>Running -&gt; Blocked (I/O 요청 시스템 콜, wait() 호출 등)</li>
  <li>Running -&gt; Ready (타이머 인터럽트 발생)</li>
  <li>Blocked -&gt; Ready (I/O 종료 인터럽트 발생)</li>
  <li>Terminate</li>
</ol>

<h3 id="scheduling-알고리즘">Scheduling 알고리즘</h3>

<ol>
  <li>nonpreemitive (비선점형)
    <ul>
      <li>I/O 발생하거나 프로세스가 종료될 때까지 cpu를 강제로 빼았을 수 없음.</li>
      <li>프로세스가 끝날때까지 계속  CPU 사용.
        <ul>
          <li>SRT ( SRTF )</li>
          <li>RR</li>
          <li>Multi-level Queue</li>
          <li>Multi-level feedback Queue</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>preemitive (선점형)
    <ul>
      <li>I/O 발생하거나 프로세스가 종료되지 않아도 cpu를 강제로 빼았을 수 있음
        <ul>
          <li>FCFS</li>
          <li>SJF</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h3 id="스케줄링-알고리즘을-평가하는-방법--성능-척도">스케줄링 알고리즘을 평가하는 방법 ⇒ 성능 척도</h3>

<ul>
  <li>이용률
    <ul>
      <li>전체 시간 중, CPU 가 놀지 않고 일을 한 시간.</li>
      <li>가능한 CPU가 계속 일해야한다.</li>
    </ul>
  </li>
  <li>처리량
    <ul>
      <li>주어진 시간 동안 몇 개의 일을 처리했는가.</li>
      <li>주어진 시간 내에 많은 일을 처리해야 한다.</li>
    </ul>
  </li>
  <li>turnaround time
    <ul>
      <li>cpu를 쓰러 들어와서 나갈 때까지의 시간</li>
      <li>cpu burst 가 끝날때까지의 시간</li>
    </ul>
  </li>
  <li>대기 시간
    <ul>
      <li>프로세스가 ready queue에서 기다린 시간의 총합</li>
    </ul>
  </li>
  <li>응답 시간
    <ul>
      <li>프로세스가 ready queueu에 들어와서 처음 cpu를 할당받은 시간.</li>
      <li>time sharing의 경우, 처음 cpu를 선점하는 것이 프로세스의 처리에 중요한 요소이기 때문에 응답시간도 고려한다.</li>
    </ul>
  </li>
</ul>

<p>✔️ 이용률, 처리량 ⇒ 시스템 입장, CPU 하나로 최대한 일을 많이 하는 것.</p>

<p>✔️ turnaround time , 대기 시간, 응답시간 ⇒ 프로세스 입장 ( 얼마나 프로세스를 빨리 끝낼 수 있는가 )</p>

<p>→ 빨리 처리하는 게 좋은 것.</p>

<p>✔️ <strong>turnaround time ≠ 프로세스를 시작하고 종료할 때까지의 시간</strong></p>

<ul>
  <li><strong>turnaround time은 한 프로세스 기준이라니라 한 작업 기준</strong></li>
</ul>

<p>✔️ ready queue에 들어온 프로세스에 한해서 스케줄링이 이루어진다.</p>

<p>ex) 중국집</p>

<p>(주인장 입장)</p>

<p>주방장이 일한 시간 → 이용률</p>

<p>중국집에서 단위 시간당 얼마나 손님을 받았는가 → 처리량</p>

<p>(손님 입장)</p>

<p>손님이 중국집에 들어와서 다 먹고 나갈 때까지의 시간 → turnaround time</p>

<p>손님이 밥을 먹은 시간 말고 대기한 시간 → wating time</p>

<p>첫번째 음식이 나올 때까지의 시간 → 응답 시간</p>

<h2 id="cpu-scheduling-알고리즘">CPU Scheduling 알고리즘</h2>

<h3 id="1-fcfsfirst-come-first-served">1. FCFS(First-Come First-Served)</h3>

<ul>
  <li>비선점형</li>
  <li>도착시간 순서대로 처리</li>
  <li>
    <p>기다리는 다른 프로세스의 응답 시간, 대기시간이 길어진다.</p>

    <p>→ 썩 효율적이지는 않음</p>
  </li>
  <li>도착 순서에 따라 성능이 달라짐
<img src="/assets/images/posts/os/2022-03-23-5-2.png" alt="스케줄링2" />
waiting time : ( 0 + 24 + 27 ) / 3 = 17
    <ul>
      <li>convoy effect → 긴 프로세스 때문에 짧은 프로세스가 기다리는 것
<img src="/assets/images/posts/os/2022-03-23-5-3.png" alt="스케줄링3" />
waiting time : ( 0 + 3 + 6 ) /3 = 3</li>
    </ul>
  </li>
</ul>

<h3 id="2-sjf-shortest-job-first-">2. SJF( Shortest Job First )</h3>

<ul>
  <li>CPU burst time이 가장 짧은 프로세스를 제일 먼저 스케줄</li>
  <li>Nonpreemtive 와 Preemtive
    <ul>
      <li>Nonpreemtive
        <ul>
          <li>처리시간이 가장 짧은 프로세스에게 CPU를 줬으면 더 짧은 프로세스가 ready Queue에 들어오더라도 처리 중인 프로세스 먼저 처리</li>
        </ul>
      </li>
      <li>Preemptive
        <ul>
          <li>더 짧은 프로세스가 들어왔다면 그 프로세스에 넘겨줌.</li>
          <li>이 방법은 Shortest-Remaining-Time-First ( SRTF )</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>minimum average waiting time을 보장
    <ul>
      <li>전체 대기 시간을 줄이기 위해서는 짧은 프로세스를 먼저 서비스</li>
      <li>⇒ SJF의 preemitive 버전에 해당
        <ol>
          <li>Nonpreemtive SJF</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<p><img src="/assets/images/posts/os/2022-03-23-5-4.png" alt="스케줄링4" /></p>

<ol>
  <li>Preemtive SJF (SRTF)</li>
</ol>

<p><img src="/assets/images/posts/os/2022-03-23-5-5.png" alt="스케줄링5" /></p>

<table>
  <thead>
    <tr>
      <th>시간-&gt;</th>
      <th>0</th>
      <th>2</th>
      <th>4</th>
      <th>5</th>
      <th>7</th>
      <th>11</th>
      <th>16</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>p1</td>
      <td>7</td>
      <td>5</td>
      <td>5</td>
      <td>5</td>
      <td>5</td>
      <td>5</td>
      <td>.</td>
    </tr>
    <tr>
      <td>p2</td>
      <td> </td>
      <td>4</td>
      <td>2</td>
      <td>2</td>
      <td>.</td>
      <td>.</td>
      <td>.</td>
    </tr>
    <tr>
      <td>p3</td>
      <td> </td>
      <td> </td>
      <td>1</td>
      <td>.</td>
      <td>.</td>
      <td>.</td>
      <td>.</td>
    </tr>
    <tr>
      <td>p4</td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td>4</td>
      <td>4</td>
      <td>.</td>
      <td>.</td>
    </tr>
    <tr>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<ul>
  <li>남은 Burst time이 같다면 도착시간이 빠른 순서</li>
  <li>
    <p>프로세스가 들어올 때마다 스케줄링</p>
  </li>
  <li>preemitive SJF(SRTF)의 문제점
    <ol>
      <li><strong>Starvation ( 기아현상 )</strong>
        <ul>
          <li>여러 프로세스가 부족한 자원을 점유하기 위해 경쟁할 때, 특정 프로세스에 영원히 자원 할당이 되지 않는 경우입니다.</li>
          <li>CPU 사용 시간이 긴 프로세스는 계속 대기.</li>
        </ul>
      </li>
      <li>CPU 사용 시간을 미리 알 수 없다.
        <ul>
          <li>실제로는 CPU를 얼마나 사용할지 모른다.</li>
          <li>실제 프로그램에서는 사용할 수 없다. 하지만 추정할 수 있다.</li>
          <li>예측 → 과거에 CPU를 얼마나 썼는가로 예측</li>
          <li>exponential averaging
            <ul>
              <li>현재를 기준으로 최근의 CPU 사용시간은 많이 반영하고 옛날 값은 적게 반영</li>
            </ul>
          </li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="3-priority-scheduling">3. Priority Scheduling</h3>

<p>우선 순위 스케줄링</p>

<ul>
  <li>각 프로세스에 priority number를 부여</li>
  <li>높은 우선순위(가장 작은 정수)를 가진 프로세스에게 CPU 할당</li>
  <li>Preemitive → 더 높은 우선순위를 가진 프로세스가 들어왔을 때 넘겨줌.</li>
  <li>SJF 도 일종의 priority scheduling
    <ul>
      <li>우선순위 = predicted next CPU burst time</li>
    </ul>
  </li>
  <li>
    <p>문제점 → 기아현상</p>

    <ul>
      <li>낮은 우선 순위는 계속 할당 받지 못함.</li>
    </ul>
  </li>
  <li>
    <p>해결책 → <strong>Aging</strong></p>

    <ul>
      <li>많이 대기한 프로세스의 우선순위를 높여줌</li>
    </ul>
  </li>
</ul>

<h3 id="4-roundrobin-rr">4. RoundRobin (RR)</h3>

<p>현대 CPU의 스케줄링 방식</p>

<p><img src="/assets/images/posts/os/2022-03-23-5-6.png" alt="스케줄링6" /></p>

<ul>
  <li>각 프로세스는 동일한 크기의 할당 시간(time quantum, time slice)을 가짐.</li>
  <li>할당 시간이 끝나면 프로세스는 CPU를 빼앗기고 ready queue의 제일 뒤에서 다시 대기한다.</li>
</ul>

<p><strong>장점</strong></p>

<ul>
  <li>응답시간이 빨라짐</li>
  <li>CPU를 얼마나 쓸지 예측할 필요없음</li>
  <li>짧은 burst time을 가진 프로세스가 빨리 종료된다.</li>
  <li>CPU를 길게 쓰는 프로세스는 기다리는 시간이 길어지고 CPU를 짧게 쓰는 프로세스는 짧아진다.</li>
  <li>일반적으로 SJF 보다 평균 turnaround time이 길지만 response time은 더 짧다.</li>
</ul>

<p><strong>할당 시간에 따른 성능</strong></p>

<ul>
  <li>할당 시간이 극단적으로 길면 FCFS 스케줄링이 됨</li>
  <li>
    <p>할당 시간이 극단적으로 짧으면 context switch 가 빈번히 발생 → overhead가 커진다.</p>

    <p>⇒ 적당한 규모의 time quantum : 10 ~ 100 milliseconds</p>
  </li>
</ul>

<p><strong>특이 케이스</strong></p>

<ul>
  <li>CPU 사용시간이 동일한 프로세스들이 있을 때, 번갈아 가면서 실행을 하다가 ,
n X quantum 만큼의 시간 후에 모든 프로세스가 먼저 종료된다.</li>
  <li>
    <p>모든 프로세스가 마지막까지 스케줄링 되게 되고 waiting time이 길어지게되서</p>

    <p>더 안 좋을 수 있다.</p>
  </li>
</ul>

<p>RR 방식이 제일 효율적이며 공정하다.</p>

<hr />

<h2 id="multilevel-queue">Multilevel Queue</h2>

<h3 id="multilevel-queue-1">Multilevel Queue</h3>

<p><img src="/assets/images/posts/os/2022-03-23-5-7.png" alt="스케줄링7" /></p>

<p>batch : CPU만 오래 사용하는 프로세스</p>

<ul>
  <li>Ready Queue를 여러개로 분할한다.
    <ul>
      <li>foreground - interactive</li>
      <li>background - bath</li>
    </ul>
  </li>
  <li>각 Ready Queue의 스케줄링 방식
    <ul>
      <li>foreground - RR</li>
      <li>background - FCFS (context 오버헤드를 줄이기 위해)</li>
    </ul>
  </li>
  <li>큐에 대한 스케줄링(큐들 사이의 스케줄링)
    <ul>
      <li>Fixed priority scheduling
        <ul>
          <li>우선순위에 높은 queue가 비어야지 낮은 queue 스케줄</li>
          <li>starvation 문제 - 우선순위가 낮은 프로세스는 기아현상 발생</li>
        </ul>
      </li>
      <li>Time slice
        <ul>
          <li>각 큐에 CPU time을 적절한 비율로 할당.</li>
          <li>ex) foreground 80%, background 20%</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="multilevel-feedback-queue">Multilevel feedback queue</h3>

<p><img src="/assets/images/posts/os/2022-03-23-5-8.png" alt="스케줄링8" /></p>

<ul>
  <li>프로세스가 다른 큐로 이동 가능.</li>
  <li>aging 을 이오 같은 방식으로 구현.</li>
  <li>고려사항
    <ul>
      <li>Queue의 수</li>
      <li>각 큐의 스케줄링 알고리즘</li>
      <li>프로세스를 상위 큐로 보는 기준</li>
      <li>프로세스를 하위 큐로 보는 기준</li>
      <li>프로세스가 처음 CPU 서비스를 받으려 할 때 들어갈 큐를 결정하는 기준</li>
    </ul>
  </li>
  <li>보통은 처음 들어오는프로세스는 우선순위가 가장 높은 큐에 넣고 우선순위가 높은 큐는 RR 방식에 할당시간은 짧게, 밑으로 갈 수록 RR 할당시간을 길게 주고 제일 밑으로 가면 FCFS 방식으로.</li>
  <li>프로세스가 우선순위가 가장 높은 큐에서 낮은 큐로 순서대로 이동한다.</li>
  <li>CPU 사용 시간이 짧은 프로세스를 처리하는데 유리.</li>
  <li>CPU 사용 시간이 긴 프로세스는 밑에 큐로 쫒겨남</li>
  <li>CPU 사용 시간을 예측할 필요 없다.</li>
</ul>

<p><img src="/assets/images/posts/os/2022-03-23-5-9.png" alt="스케줄링9" /></p>

<h3 id="multiple-processer-scheduling">Multiple-Processer Scheduling</h3>

<ul>
  <li>CPU 가 여러 개인 경우 스케줄링은 더욱 복잡해짐</li>
  <li>Homogeneous processor 인 경우
    <ul>
      <li>Queue 에 한줄로 세워서 각 프로세서가 알아서 꺼내가게 할 수 있다.</li>
      <li>반드시 특정 프로세서에서 수행되어야 하는 프로세스가 있는 경우에는 문제가 복잡해짐.</li>
    </ul>
  </li>
  <li>Load sharing
    <ul>
      <li>일부 프로세서에 job이 몰리지 않도록 부하를 적절히 공유하는 매커니즘이 필요.</li>
      <li>별개의 큐를 주는 방법 vs. 공동 큐를 사용하는 방법</li>
    </ul>
  </li>
  <li>Symmetric Multiprocessing (SMP)
    <ul>
      <li>각 프로세서가 각자 알아서 스케줄링 결정</li>
    </ul>
  </li>
  <li>Asymmetric multiprocessing
    <ul>
      <li>하나의 프로세서가 시스템 데이터의 접근과 공유를 책임지고 나머지 프로세서는 거기에 따름</li>
    </ul>
  </li>
</ul>

<h3 id="real-time-scheduling">Real-Time Scheduling</h3>

<p>미리 스케줄링을 해서 deadline을 지킬 수 있도록 한다.</p>

<ul>
  <li>Hard real-time systems
    <ul>
      <li>hard real-time task는 정해진 deadline 안에 반드시 끝내도록 스케줄링</li>
    </ul>
  </li>
  <li>Soft real-time computing
    <ul>
      <li>Soft real-time task는 일반 프로세스에 비해 높은 priority를 갖도록.</li>
      <li>deadline을 반드시 보장하지 않음.</li>
    </ul>
  </li>
</ul>

<h3 id="thread-scheduling">Thread Scheduling</h3>

<ul>
  <li>local Scheduling
    <ul>
      <li>User level thread의 경우 사용자 프로세스 내부에서 어떤 thread를 스케줄할지 결정.</li>
    </ul>
  </li>
  <li>Global Scheduling
    <ul>
      <li>
        <p>kernel level thread 의 경우 일반 프로세스의 스케줄링 방식과 마찬가지로 thread 스케줄링</p>
      </li>
      <li>
        <p>user level : 사용자 프로세스가 스레드를 직접 관리</p>

        <p>kernel level : 운영체제가 스레드의 존재를 알고 있음</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="algorithm-evaluation">Algorithm Evaluation</h3>

<ul>
  <li>Queueing models
    <ul>
      <li>확률 분포로 주어지는 arrival rate 와 serivce rate등을 통해 각종 performance index값을 계산</li>
      <li>이론</li>
    </ul>
  </li>
  <li>Implemenation(구현) &amp; Measurement(성능 측정)
    <ul>
      <li>실제 시스템에 알고리즘을 구현하여 실제 작업(workload)에 대해서 성능을 측정 비교</li>
      <li>실측</li>
    </ul>
  </li>
  <li>Simulation
    <ul>
      <li>알고리즘을 모의 프로그램으로 작성 후 trace(시뮬레이션 input)를 입력으로 하여 결과 비교</li>
    </ul>
  </li>
</ul>
:ET