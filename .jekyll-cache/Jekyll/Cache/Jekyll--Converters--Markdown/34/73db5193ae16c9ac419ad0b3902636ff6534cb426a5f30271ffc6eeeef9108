I"b<h2 id="docker-file-작성하고-image-생성하기">Docker File 작성하고 image 생성하기</h2>

<p><br />
<br />
<br /></p>

<p>도커에 대한 개념을 익혔다면<br />
도커에서 어플리케이션을 실행하기 위해 Dockerfile을 생성하고<br />
image 를 생성한 뒤, image 를 실행하여 동작을 확인해 봅시다 !<br />
<br /></p>

<blockquote>
  <p>Docker 와 Dockerfile, Docker image, container 에 대한 설명을 <a href="../../yeonui-0626.github.io/_posts/2022-06-17-devops-docker.md">이전 포스팅</a>을 참고 해주세요!</p>
</blockquote>

<p>먼저 실습을 할 프로젝트는 socket.io 를 이용해 채팅 프로그램을 간단히 구현한 어플리케이션입니다.<br />
node.js 서버를 사용하고 필요한 모듈을 설치한 뒤 socket.js 파일을 실행하면 됩니다.
<img src="../assets/images/posts/dockerfile1.png" alt="docker1" /></p>

<p>서버를 따로 사용하지 않고 로컬에서 테스트를 할 것이기 때문에<br />
<strong>Dockerfile을 생성→ image 생성 → image 실행</strong> 순서로 간단하게 진행했습니다.<br />
<br /></p>

<h3 id="1-docker-file-생성">1. Docker File 생성</h3>

<p>이 어플리케이션을 도커에서 실행시키기 위한 Dockerfile을 만듭니다.</p>

<p>Dockerfile는 어플리케이션을 실행하기 위해 어떻게 container를 만들지에 대한 정보가 담겨있는 파일입니다.</p>

<p>필요한 라이브러리, 파일, 환경 변수, 구동 방법에 대한 내용을 작성하면 됩니다.</p>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> node:16.15.0</span>
<span class="k">LABEL</span><span class="s"> "purpose"="practice"</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /usr/src/test
<span class="k">WORKDIR</span><span class="s"> /usr/src/test</span>
<span class="k">COPY</span><span class="s"> package.json /usr/src/test</span>
<span class="k">RUN </span>npm <span class="nb">install</span>
<span class="k">COPY</span><span class="s"> . /usr/src/test</span>
<span class="k">CMD</span><span class="s"> node socket.js</span>
</code></pre></div></div>

<p>명령어를 순서대로 살펴보겠습니다.</p>

<p><code class="language-plaintext highlighter-rouge">FROM node:16.15.0</code> : node 를 기반으로 이미지를 생성하겠다.</p>

<p><code class="language-plaintext highlighter-rouge">RUN mkdir -p /usr/src/test</code> : /user/src/test 폴더 생성</p>

<p><code class="language-plaintext highlighter-rouge">WORKDIR /usr/src/test</code> : 생성한 /user/src/test 를 작업 디렉토리로 설정</p>

<p><code class="language-plaintext highlighter-rouge">COPY package.json /usr/src/test</code> : 모듈들을 설치하기 위해 package.json 파일을 작업 디레토리에 복사</p>

<p><code class="language-plaintext highlighter-rouge">RUN npm install</code> : 모듈 설치</p>

<p><code class="language-plaintext highlighter-rouge">COPY . /usr/src/test</code> : 실행에 필요한 파일들 복사</p>

<p><code class="language-plaintext highlighter-rouge">CMD node socket.js</code> : 어플리케이션 실행</p>

<ul>
  <li>여기서 <code class="language-plaintext highlighter-rouge">COPY</code> 는 어플리케이션에 필요한 파일들을 docker container 내부로 복사한다는 의미입니다.</li>
</ul>

<h3 id="dockerignore">.dockerignore</h3>

<p>.gitgnore 처럼 도커에서 빌드시 제외할 파일들을 설정할 수 있습니다.
.dockerignore 파일을 생성한 뒤, 제외할 폴더/파일을 작성하면 됩니다.
그럼 image 를 생성하기 위한 build 를 할 때, 해당 폴더/파일들을 제외하고 빌드가 진행됩니다.</p>

<p><img src="../assets/images/posts/dockerfile2.png" alt="docker2" /></p>

<h3 id="2-image-생성">2. Image 생성</h3>

<ul>
  <li>아래의 명령어를 통해 dockerfile을 build하고 image 를 생성합니다.</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> <span class="o">[</span>repository 이름]:[태그]  <span class="o">[</span>dockerfile이 있는 경로]
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">--tag</code> : build name 을 name:tag 형식으로 작성</p>

<p><code class="language-plaintext highlighter-rouge">[repository 이름]:[태그]</code></p>

<ul>
  <li>태그는 버전과 비슷한 역할</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">[dockerfile이 있는 경로]</code></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.</code> : 현재 경로</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> sockerbuild:1.0 <span class="nb">.</span>
</code></pre></div></div>

<p><img src="../assets/images/posts/dockerfile3.png" alt="docker3" /></p>

<p>빌드를 하면 dockerfile의 script 들이 실행되며 성공적으로 끝나면 image가 생성됩니다.</p>

<h3 id="3-mage-생성-확인">3. mage 생성 확인</h3>

<p><code class="language-plaintext highlighter-rouge">$ docker images</code> : 생성된 이미지와 이미지 정보 확인</p>

<p><img src="../assets/images/posts/dockerfile4.png" alt="docker4" /></p>

<h3 id="4-image-실행">4. image 실행</h3>

<ul>
  <li>image 생성이 완료되었다면 아래의 명령어로 image를 실행합니다.</li>
</ul>

<div class="language-docker highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
</code></pre></div></div>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">p</span> <span class="mi">3000</span><span class="p">:</span><span class="mi">3000</span> <span class="o">-</span><span class="n">d</span> <span class="n">sockerbuild</span><span class="p">:</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">-q</code> : 포트설정<br />
<code class="language-plaintext highlighter-rouge">-d</code> : 컨테이너 background에서 실행</p>

<h3 id="5-docker-container-확인">5. docker container 확인</h3>

<ul>
  <li>image 를 실행하면 containr가 생성된 것을 확인할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">docker ps</code> : container 확인
<img src="../assets/images/posts/dockerfile5.png" alt="docker5" /></li>
</ul>

<p><br />
<br /></p>

<hr />

<p><br />
<br /></p>

<blockquote>
  <p>참고</p>

  <p>https://taekwang.tistory.com/31<br />
https://code-masterjung.tistory.com/133 &gt; https://wooono.tistory.com/123</p>
</blockquote>
:ET