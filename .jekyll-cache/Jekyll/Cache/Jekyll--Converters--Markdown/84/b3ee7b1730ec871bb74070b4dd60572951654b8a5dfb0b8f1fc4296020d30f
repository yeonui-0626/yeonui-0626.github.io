I"*<blockquote>
  <p>WAS 부터 Servlet Container의 servlet의 작동 과정까지 살펴보았다 !     <br />
Servlet의 통해 동적 처리는 가능하게 되었지만 웹 페이지가 많은 기능을 제공 할수록 코드는 복잡해지기 마련이다.  <br />
servlet은 java 클래스이고 응답을 웹페이지로 보여지게 하기 위해서는 servlet 내에서 html 코드를 작성해야한다.     <br />
결국 html 코드 뿐만 아니라 디자인을 위한 css 코드까지 servlet 내에서 작성해야한다.</p>

  <p>디자이너 : OMG..!</p>

  <p>이런 문제점을 보완하기 위한 것이 바로 <strong>JSP(Java Server Page) !</strong>     <br />
그래서 이번 포스팅에서는 servlet와 JSP에 대해서 간단히 정리해보았다.</p>
</blockquote>

<h2 id="servlet-과-jsp의-차이">Servlet 과 JSP의 차이</h2>

<h3 id="servlet">Servlet</h3>

<ul>
  <li>Http 요청에 대한 처리(응답)을 하기 위한 Server Side Java Program</li>
  <li><strong>Java 코드 안의 HTML 코드 ( 하나의 자바 클래스 )</strong></li>
  <li>servlet에 대한 자세한 설명은 이전 포스팅 참고</li>
</ul>

<h3 id="jsp--java-server-page-">JSP ( Java Server Page )</h3>

<ul>
  <li><strong>HTML 코드 안의 Java 코드</strong></li>
  <li>Java 언어를 기반으로 하는 Server Side 스크립트 언어</li>
  <li><strong>Java Container는 JSP 파일의 HTML 코드와 Java 코드를 분리하여 <code class="language-plaintext highlighter-rouge">.class</code> 파일을 만들고 실행한다.</strong></li>
</ul>

<h3 id="jsp-특징">JSP 특징</h3>

<ul>
  <li>jsp 는 내장객체를 사용한다.
    <ul>
      <li>내장 객체 : WAS에서 이미 만들어 놓은 객체들</li>
      <li>Scriptlet 안에서 바로 사용 가능</li>
    </ul>
  </li>
  <li>.<strong>jsp 파일은 실행될 때, servlet(.java)로 변경되어 실행되고 이후 과정은 servlet와 동일하다.</strong></li>
  <li>servlet과 다르게 수정된 경우 재배포할 필요없음</li>
</ul>

<h3 id="jsp가-빠를까-servlet이-빠를까">JSP가 빠를까 servlet이 빠를까?</h3>

<p>jsp가 servlet으로 변환 되어 실행되기 때문에 시간이 더 많이 걸릴 수도 있지만 처음을 제외하고는 jsp 가 빠르다.</p>

<p>⇒ JSP 작성은 script 기반으로 실행은 compile 기반(servlet)</p>

<p><strong>JSP Scriptlet 요소</strong></p>

<ol>
  <li>선언
    <ul>
      <li>멤버변수 선언이나 메소드를 선언하는 영역</li>
      <li>전역변수로 선언됨</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;%!</span> <span class="n">멤버변수와</span>  <span class="n">method</span> <span class="n">작성</span><span class="o">%</span>
</code></pre></div>    </div>
  </li>
  <li>처리
    <ul>
      <li>Client 요청 시 매번 호출 영역</li>
      <li>Servlet으로 변환 시 sevice()method에 해당되는 영역</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;%</span> <span class="n">java</span> <span class="n">code</span> <span class="o">%&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>표현식(출력)
    <ul>
      <li>데이터를 브라우저에 출력할 때 사용</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;%=</span> <span class="n">문자열</span> <span class="o">%&gt;</span>
    
 <span class="c1">// 주의 ! 세미콜론 필요없음</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>주석</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="o">&lt;%--</span> <span class="n">주석</span> <span class="o">--</span> <span class="o">&gt;</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p>html 주석과의 차이</p>

        <p>주석을 하게되면 둘다 client에게 안보이는 것은 동일하나, html 주석으로 처리하게 되면 java 파일에서는 실행되기 때문에 주석된 코드가 에러코드라면, html 주석으로 처리하더라도 계속 에러가 발생하기 때문에 java 코드는 jsp 주석으로 처리해야한다.</p>
      </li>
    </ul>
  </li>
</ol>

<p>✔️ <strong>jsp, html, script 실행순서</strong></p>

<ul>
  <li>java가 html 이나 script 보다 더 먼저 실행된다.</li>
  <li>java - server 단, html &amp; scrtip - client 단 이라고 생각하면 당연한 흐름이다.
    <ul>
      <li>html과 scritp는 나열된 순서대로 실행</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>참고</p>

</blockquote>

<p><a href="https://javarayo.tistory.com/20">[프로그래밍] JSP 기본 다루기</a>  <br />
<a href="https://gmlwjd9405.github.io/2018/11/03/jsp.html">[web] JSP 란 (Java Server Pages)</a>   <br />
<a href="https://morningcoding.tistory.com/entry/JSP%EC%99%80-Servlet%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80">JSP와 Servlet이란 무엇인가?</a></p>
:ET