I"h<h2 id="sw-expert-academy-1249-번-보급로">SW Expert Academy 1249 번 보급로</h2>

<p><a href="https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV15QRX6APsCFAYD">문제보기</a></p>

<h3 id="1-문제-풀이">1. 문제 풀이</h3>

<ul>
  <li>최근에 풀었던 백준의 녹색 옷을 입은 애가 젤다지? 문제가 생각났다.</li>
  <li>그래프를 탐색하며 최소 비용으로 목적지까지 가는 문제 !</li>
  <li>바로바로 다익스트라 문제 !</li>
  <li>풀이를 들으면서 다익스트라 방법이랑 BFS 방법이랑 굉장히 비슷해서 괴슈탈트 붕괴가 왔다.</li>
  <li>내가 푼 방법은 다익스트라와 BFS의 콜라보..?ㅋㅋㅋㅋㅋㅋㅋ</li>
  <li>BFS로 풀었는데 우선순위 큐를 썼다. 그래서 다익스트라와 매우 유사해보인다. <del>이것도 그냥 다익스트라라고 하자</del>
    <ul>
      <li>사실 뭐가뭔지 잘 모르겠다.</li>
    </ul>
  </li>
  <li>
    <p>또 우선 순위 큐를 쓰면서도 <em>꼭 우선순위 큐를 써야하나,,, ?</em> 하는 의문이 들었다.</p>
  </li>
  <li>시작지점(0,0)부터 도착지점(n-1,n-1)까지 최소비용으로 가면된다.</li>
  <li>현재 위치에서 갈 수 있는 지점을 목적지점이라고 하면,
    <ul>
      <li>지금 목적지점의 최소비용과 현재 위치에서 목적지점까지 갔을 때의 비용을 비교해 더 작은 비용으로 업데이트 시켜주면 된다.</li>
      <li>이 때, 업데이트 되었다면 업데이트된 최소 비용으로 다른 노드들을 또 업데이트 해줘야하기 때문에 큐에 넣어줘야한다.</li>
    </ul>
  </li>
  <li>탐색할 때 도착지점에 도착했는지 확인까지 하면 시간을 더 줄일 수 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">if(cur.x ==N-1 &amp;&amp; cur.y==N-1) return;</code></li>
    </ul>
  </li>
</ul>

<h4 id="다익스트라와-우선-순위-큐">다익스트라와 우선 순위 큐</h4>
<ul>
  <li>다익스트라에서 우선 순위 큐를 사용하는 이유는 시간 효율을 잡기 위함이다.(일반 큐를 써도 답이 나옴)</li>
  <li>항상 최소의 비용을 꺼내면 최소의 비용으로 더 빨리 도착지에 갈 수 있다.</li>
  <li>최소 비용이 업데이트된 경우에만 큐에 넣고 다시 최소 비용을 업데이트 하므로 우선순위 큐를 사용했을 때 연산이 더 감소된다.
    <ul>
      <li>일반 큐 사용 =&gt; 최소 비용 업데이트가 잦아짐 =&gt; 연산 증가</li>
      <li>우선선위 큐 사용 =&gt; 현재까지의 비용 중, 가장 최소인 비용으로 업데이트 하면 이후에 업데이트할 일이 적어짐 =&gt; 연산 감소
<img src="/assets/images/posts/2022-04-07-1.png" alt="우선순위큐/큐시간비교" /></li>
      <li>우선 순위 큐를 사용했을 때, 139ms</li>
      <li>큐를 사용했을 때, 424ms</li>
    </ul>
  </li>
</ul>

<h3 id="2-시행착오">2. 시행착오</h3>
<ul>
  <li>delta 를 이용한 사방 탐색
    <ul>
      <li>행렬에서 방향 탐색을 할 때 델타가 많이 쓰이고 나도 많이 썼다.</li>
      <li>근데 가끔 델타의 초기값과 다음 값을 어떻게 설명해야할지 헷갈릴 때가 있었다.</li>
      <li>이번 문제에서 제대로 실수를 해서 계속 답을 찾지 못했다. 이번기회로 역시 난 아직 멀었음을 깨달았다 ~ 난 아직 초짜 ~</li>
      <li>당연하고 어렵지 않은 코드이지만 다음 실수를 막기위해 적어 놓기 !
        <ol>
          <li>같은 방향을 계속 탐색해야할 때
            <ul>
              <li>초기화를 한번 한 뒤, 누적해서 더해준다.
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kt">int</span> <span class="n">mx</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span> 
 <span class="kt">int</span> <span class="n">my</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
 <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">d</span><span class="o">++){</span>
   <span class="n">mx</span> <span class="o">+=</span> <span class="n">dx</span><span class="o">[</span><span class="n">d</span><span class="o">];</span>
   <span class="n">my</span> <span class="o">+=</span> <span class="n">dy</span><span class="o">[</span><span class="n">d</span><span class="o">];</span>
 <span class="o">}</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
          <li>현 위치에서 상하좌우만 확인할 때
            <ul>
              <li>항상 현재 위치에서 더해준다.
                <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">d</span><span class="o">++){</span>
  <span class="kt">int</span> <span class="n">mx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">d</span><span class="o">];</span>
  <span class="kt">int</span> <span class="n">my</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">d</span><span class="o">];</span>
 <span class="o">}</span>
</code></pre></div>                </div>
              </li>
            </ul>
          </li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<h3 id="3-코드">3. 코드</h3>

<script src="https://gist.github.com/yeonui-0626/89798a5776f60f2df082cc1fc20fdf76.js"></script>

:ET