I"N<p><br /></p>

<h2 id="aop3-aop-적용해보기with-aspectj">AOP(3) AOP 적용해보기(with AspectJ)</h2>

<p><br />
<br /></p>

<p><a href="https://yeonui-0626.github.io/spring/2022/04/22/web-aop2.html">저번 게시물</a>에 이어서 이번에는 Bean을 직접 적어주지 않고 어노테이션을 이용해 Bean 객체를 생성하도록 하고, 클래스를 다 따로 구현했던 Advice 들도 어노테이션을 이용하여 하나의 파일에서 구현해볼 것이다.</p>

<p>이것을 가능하게 해주는 것이 <strong>AspectJ</strong> 이다.</p>

<h2 id="aspectj">AspectJ</h2>

<ul>
  <li>Java AOP의 사실상 표준 소프트웨어</li>
  <li>Spring AOP에도 이 AspectJ를 이용하여 AOP를 구현하는 기능이 포함되어 있다.</li>
</ul>

<p>xml 파일에 Bean을 등록하지 않아도 되서 xml이 간결해지고 Advice 별로 클래스들을 만들지 않아도 된다.</p>

<blockquote>
  <p>예제는 내 마음대로 구현한 것이다.</p>

</blockquote>

<ol>
  <li>의존성 추가
    <ul>
      <li>기존의 <code class="language-plaintext highlighter-rouge">spring-aop</code> 는 그대로 유지</li>
      <li><code class="language-plaintext highlighter-rouge">aspectjtools</code> , <code class="language-plaintext highlighter-rouge">aspectjweaver</code> 추가</li>
    </ul>
    <ul>
      <li>aspectjtools
        <ul>
          <li>AscpectJ 컴파일러(AJC)를 포함하고 있다. AJC는 컴파일 중에 자바 클래스에 aspects을 적용한다.</li>
          <li>native AspectJ 또는 Annotation을 이용한 @AspectJ 구문도 컴파일한다.</li>
          <li>AJC는 컴파일 후 바이너리 weaver 단계에서 기존 클래스 파일에 Aspect을 위빙할 수 있다.</li>
          <li>AspectJ weaver의 상위 집합이며, 따라서 AspectJ 런타임의 상위 집합이기도 하다.</li>
        </ul>
      </li>
      <li>aspectjweaver
        <ul>
          <li>Java 클래스에 Aspect 를 적용한다.</li>
          <li>클래스 로딩 중에 LTW(Load-Time Weaving)를 적용하기 할 수 있고 AspectJ 런타임 클래스를 포함한다.</li>
        </ul>
      </li>
      <li>둘의 큰 차이는 weaving 시점이다
        <ul>
          <li>Load time 이냐, Compile time, Runtime이냐- aspectweaver 없이 aspectjtools 만 추가해도 돌아는 가지만 보통 두개를 함께 추가하는 것 같다</li>
        </ul>
      </li>
      <li>weaving ?
        <ul>
          <li>타겟 객체에 Aspect를 적용해 새로운 프록시 객체를 생성하는 절차
 <strong>pom.xml</strong></li>
        </ul>
      </li>
    </ul>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span>
 <span class="nt">&lt;dependency&gt;</span>
 	  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
 	  <span class="nt">&lt;artifactId&gt;</span>spring-aop<span class="nt">&lt;/artifactId&gt;</span>
 	  <span class="nt">&lt;version&gt;</span>5.3.18<span class="nt">&lt;/version&gt;</span>
 <span class="nt">&lt;/dependency&gt;</span>
 <span class="c">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjtools --&gt;</span>
 <span class="nt">&lt;dependency&gt;</span>
 	  <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
 	  <span class="nt">&lt;artifactId&gt;</span>aspectjtools<span class="nt">&lt;/artifactId&gt;</span>
 	  <span class="nt">&lt;version&gt;</span>1.9.8<span class="nt">&lt;/version&gt;</span>
 <span class="nt">&lt;/dependency&gt;</span>
 <span class="c">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span>
 <span class="nt">&lt;dependency&gt;</span>
     <span class="nt">&lt;groupId&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
     <span class="nt">&lt;artifactId&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
     <span class="nt">&lt;version&gt;</span>1.9.8<span class="nt">&lt;/version&gt;</span>
     <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
 <span class="nt">&lt;/dependency&gt;</span>**
</code></pre></div>    </div>
  </li>
  <li>자동 프록시 설정
    <ul>
      <li>autoproxy</li>
      <li>Annotation을 통해 bean 등록 해줌</li>
      <li>root-context.xml 에 작성</li>
    </ul>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;aop:aspectj-autoproxy/&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>타켓 객체에 어노테이션 추가
    <ul>
      <li>타겟 객체 - <code class="language-plaintext highlighter-rouge">calculationImpl</code></li>
      <li>Bean 에 등록될 수 있도록 어노테이션(<strong>@Service</strong>)을 추가한다.</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Service</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculationImpl</span> <span class="kd">implements</span> <span class="nc">Calculation</span> <span class="o">{</span>
 <span class="o">...</span>
 <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>MyAspect 클래스 작성
    <ul>
      <li>여기에 모든 advice를 처리할 메소드들을 구현한다.</li>
    </ul>
  </li>
  <li>MyAspect 클래스에 어노테이션 선언
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Component</code> , <code class="language-plaintext highlighter-rouge">@Aspect</code></li>
      <li>Ascpet 어노테이션만으로는 Bean 등록이 되지 않기 때문에 Component도 같이 추가</li>
    </ul>
  </li>
  <li>Advice 구성
    <ul>
      <li>각 Advice마다 어노테이션이 존재한다.
        <ul>
          <li>@Before</li>
          <li>@After</li>
          <li>@AfterThrowing</li>
          <li>@AfterReturning</li>
          <li>@Around</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">@Before(value = "execution(* com.exam.aop.entity.CalculationImpl.*(..) )")</code>
        <ul>
          <li>Pointcut을 지정할 수 있다.</li>
          <li>정규표현식을 이용한다.</li>
          <li><code class="language-plaintext highlighter-rouge">* com.exam.aop.entity.CalculationImpl.*(..)</code>
            <ul>
              <li>모든 리턴 타입, com.exam.aop.entity.CalculationImpl 클래스 내, 모든 메소드, 파라미터 값 0개 이상.</li>
              <li>정규표현식에 부합하는 메소드에 Ascpect 위빙</li>
            </ul>
          </li>
          <li><code class="language-plaintext highlighter-rouge">public int around(ProceedingJoinPoint joinPoint)</code>
            <ul>
              <li>실행하는 메소드 객체를 인자 값으로 받는다.</li>
            </ul>
          </li>
        </ul>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">com.exam.aop.advice</span><span class="o">;</span>
            
<span class="kn">import</span> <span class="nn">org.aspectj.lang.JoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.After</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.AfterReturning</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.AfterThrowing</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Before</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>
<span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAspect</span> <span class="o">{</span>
            
    <span class="nd">@Before</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Before 실행 &gt;&gt;&gt; "</span><span class="o">);</span>
    <span class="o">}</span>
            
    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"AfterThrowing &gt;&gt;&gt; "</span><span class="o">);</span>
    <span class="o">}</span>
            
            
    <span class="nd">@AfterThrowing</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">,</span> <span class="n">throwing</span> <span class="o">=</span> <span class="s">"e"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterThrowing</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"AfterThrowing &gt;&gt;&gt; "</span><span class="o">+</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
            
    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">,</span><span class="n">returning</span> <span class="o">=</span> <span class="s">"returnValue"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="nc">JoinPoint</span> <span class="n">joinPoint</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">returnValue</span><span class="o">)</span>  <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"AfterReturn &gt;&gt;&gt; returnValue : "</span><span class="o">+</span><span class="n">returnValue</span><span class="o">);</span>
                
    <span class="o">}</span>
            
    <span class="nd">@After</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"After 실행 &gt;&gt;&gt; "</span><span class="o">);</span>
    <span class="o">}</span>
            
    <span class="nd">@Around</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"execution(* com.exam.aop.entity.CalculationImpl.*(..) )"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">around</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Around start &gt;&gt;&gt;"</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span> <span class="c1">// 핵심코드 호출</span>
        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"ThrowAbleAround"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Around end &gt;&gt;&gt;"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>main 실행 코드</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">package</span> <span class="nn">com.exam.aop</span><span class="o">;</span>
    
 <span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">org.springframework.context.support.ClassPathXmlApplicationContext</span><span class="o">;</span>
    
 <span class="kn">import</span> <span class="nn">com.exam.aop.entity.Calculation</span><span class="o">;</span>
    
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Program</span> <span class="o">{</span>
    	
 	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    		
 		<span class="nc">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> 
 				<span class="k">new</span> <span class="nf">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">"com/exam/aop/setting.xml"</span><span class="o">);</span>
    				
    		
 		<span class="nc">Calculation</span> <span class="n">calc</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Calculation</span><span class="o">)</span><span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="nc">Calculation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    		
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"===================== sum ====================="</span><span class="o">);</span>
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calc</span><span class="o">.</span><span class="na">sum</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">5</span><span class="o">));</span>
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=================== division ==================="</span><span class="o">);</span>
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calc</span><span class="o">.</span><span class="na">division</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">5</span><span class="o">));</span>
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=============== division - execption ============"</span><span class="o">);</span>
 		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">calc</span><span class="o">.</span><span class="na">division</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
 	<span class="o">}</span>
 <span class="o">}</span>
</code></pre></div>    </div>

    <p>출력</p>

    <p><img src="/assets/images/posts/web/2022-04-25-aop3.png" alt="Untitled" /></p>

    <ul>
      <li>AfterThorwing은 왜 2번 실행되는 걸까 ??</li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="around-구현시-에러">Around 구현시 에러</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Null return value from advice does not match primitive return type for
</code></pre></div></div>

<ul>
  <li>Around 가 가장 마지막에 종료되서 그런지, Around의 리턴 값과 타겟 객체의 실행method 리턴값을 일치 시켜줘야했다.</li>
  <li><a href="https://www.codedevlib.com/article/spring-aop-null-return-value-from-advice-does-not-match-primitive-return-type-for-summary-49337">참고블로그</a></li>
</ul>

<hr />

<p>자바부터 AspectJ 까지 AOP를 구현해보았는데 가면 갈수록 더 이해할게 많아지는 느낌이였다. 역시 만들어놓은 걸 가져다 쓰는거는 쉬운데 자세히 들어가면 더 어려워지는 느낌이다.</p>

<p>AOP를 이용해 로깅을 처리하는 것과 weaving 시점의 차이에 대해 궁금해졌다 !</p>

<blockquote>
  <p>참고</p>

</blockquote>

<p><a href="https://www.youtube.com/watch?v=y2JkXjOocZ4">https://www.youtube.com/watch?v=y2JkXjOocZ4</a>    <br />
<a href="https://araikuma.tistory.com/309">https://araikuma.tistory.com/309</a>    <br />
<a href="https://mvnrepository.com/artifact/org.aspectj/aspectjweaver/1.9.8">https://mvnrepository.com</a>     <br />
<a href="https://addio3305.tistory.com/86">https://addio3305.tistory.com/86</a></p>
:ET