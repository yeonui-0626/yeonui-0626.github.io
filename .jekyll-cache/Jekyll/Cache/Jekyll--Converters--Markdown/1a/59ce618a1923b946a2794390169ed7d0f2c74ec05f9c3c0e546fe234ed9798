I",<h2 id="chapter-2-system-structure--program-execution">Chapter 2. System Structure &amp; Program Execution</h2>

<blockquote>
  <p>프로그램이 하드웨어 위에서 어떻게 동작하는지</p>
</blockquote>

<h3 id="컴퓨터-시스템-구조">컴퓨터 시스템 구조</h3>

<p><img src="/assets/images/posts/2022-03-11-d.png" alt="컴퓨터 시스템 구조" /></p>

<p><strong>메모리</strong> : CPU의 작업 공간  <br />
<strong>device controller</strong> : 각 I/O device의 전담 cpu 역할  <br />
<strong>local buffer</strong> : device controller의 작업 공간</p>

<ul>
  <li>CPU는 매 클럭 사이클마다 명령어를 읽어서 실행.</li>
  <li>CPU는 메모리에 계속해서 접근을 하면서 일함.</li>
  <li>메모리 외 다른 장치와의 소통은 device controller 를 통해서 한다.</li>
  <li>CPU 내부
    <ul>
      <li>interrupt line</li>
      <li>mode bit</li>
      <li>registers</li>
    </ul>
  </li>
</ul>

<p><span style="color:gray;">(CPU 동작 흐름 추가로 공부 하기)</span></p>

<h3 id="mode-bit">Mode bit</h3>

<ul>
  <li>CPU를 사용자가 갖고 있느냐, 운영체제가 갖고 있느냐</li>
  <li>목적
  사용자 프로그램의 잘못된 수행으로 다른 프로그램 및 운영체제에 피해가 가지 않도록 하기 위한 보호 장치</li>
  <li>Mode bit을 통해 하드웨어적으로 두 가지 모드의 operation 지원</li>
</ul>

<p><img src="/assets/images/posts/os/2022-03-11-c.png" alt="mode bit" /></p>

<ul>
  <li>
    <p><strong>모니터 모드 ( ⇒ 커널 모드, 시스템 모드)</strong></p>

    <p><strong><code class="language-plaintext highlighter-rouge">mode bit : 0</code></strong></p>

    <p>운영체제가 제어권을 갖고있음 →모든 instruction 실행 가능.  <br />
  Interrtupt 나 Exception 발생시 하드웨어가 mode bit 을 0으로 바꿈.  <br />
  또한 I/O device에 접근할 수 있는 명령어는 Mode bit가 0인 경우만 가능.</p>
    <ul>
      <li>운영체제가 i/o 프로그램에 요청하는 것은 System call을 이용함.</li>
    </ul>
  </li>
  <li>
    <p><strong>사용자 모드</strong></p>

    <p><strong><code class="language-plaintext highlighter-rouge">mode bit : 1</code></strong></p>

    <p>한정된 instruction만 실행. 사용자 프로그램을 완전히 믿을 수 없기 때문에  <br />
  사용자 프로그램에게 CPU를 언기기 전에 mode bit을 1로 셋팅</p>
  </li>
</ul>

<h3 id="timer">Timer</h3>

<ol>
  <li>CPU의 제어권을 통제하기 위해(CPU를 특정 프로그램이 독점하는 것으로 부터 보호)</li>
  <li>CPU의 Time Sharing을 위해</li>
</ol>

<p><span style="color:#ff5100">정해진 시간이 흐른 뒤 운영체제에게 제어권이 넘어가도록 인터럽트를 발생시킴.</span></p>

<h3 id="device-controller">Device Controller</h3>

<ul>
  <li>I/O device controller → 하드웨어
    <ul>
      <li>I/O 장치를 관리하는 작은  CPU</li>
      <li>제어 정보를 위해 control register, status register를 가짐.</li>
      <li>local buffer 를 가짐( 일종의 data register )</li>
    </ul>
  </li>
  <li>I/O는 실제 device와 local buffer 사이에서 일어남</li>
  <li>Device controller는 I/O가 끝났을 경우 interrupt로 CPU에 알림.</li>
</ul>

<h3 id="입출력-io의-수행">입출력 I/O의 수행</h3>

<p><span style="color:#ff5100"><strong>CPU가 직접 I/O 를 호출하지 않음.</strong></span></p>

<ul>
  <li>모든 입출력 명령은 특권 명령( mode bit : 0 , 운영체제의 권한)</li>
  <li>그럼 사용자 프로그램은 어떻게 I/O 에 접근할까?
    <ul>
      <li><strong>시스템 콜</strong>(System call) 로 <strong>운영체제</strong>에게 I/O 요청</li>
    </ul>
  </li>
  <li>제어권이 인터럽트 벡터가 가리키는(주소의) 인터럽트 서비스 루틴으로 이동</li>
  <li>trap을 사용하여 언터럽트 벡터의 특정 위치로 이동</li>
  <li>제어권이 인터럽트 벡터가 가리키는 인터럽트 서비스 루틴으로 이동</li>
  <li>올바른 I/O 요청인지 확인 후 I/O 수행</li>
  <li>I/O 완료 시 제어권을 시스템콜 다음 명령으로 옮김</li>
</ul>

<h3 id="인터럽트">인터럽트</h3>

<p>인터럽트 당한 시점의 레지스터와 program counter 를 save 한 후 CPU의 제어를 인터럽트 처리 루틴에 넘긴다.</p>

<p><strong>Interrupt</strong></p>

<ul>
  <li>Interrup : 하드웨어가 발생시킨 인터럽트 ( 통상적으로 말하는 인터럽트는 하드웨어 인터럽트 )</li>
  <li>Trap ( 소프트웨어 인터럽트)
    <ul>
      <li><strong>Exception</strong> : 프로그램이 오류를 범한 경우</li>
      <li><strong>System call</strong> : 프로그램이 커널함수를 호출하는 경우</li>
    </ul>

    <p>❗ 사용자가 운영체제 코드를 직접 작성하는 것이 불가능하기 때문에 사용자 프로그램이  <br />
    inpterupt 라인을 호출( ⇒ System call)하면 CPU 제어권은 운영체제에게 넘어감.</p>
  </li>
  <li>인터럽트 벡터
    <ul>
      <li>해당 인터럽트의 처리 루틴 주소를 가지고 있음
  → 어떤 주소로 가서 처리할지</li>
    </ul>
  </li>
  <li>인터럽트 처리 루틴( ⇒ 인터럽트 핸들러 )
    <ul>
      <li>해당 인터럽트를 처리하는 커널 함수</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  프로그램이 직접 인터럽트 라인을 실행 → software 인터럽트 
  이외는 모두 하드웨어 인터럽트 
  현대의 운영체제는 인터럽트에 의해 구동된다 ?
    
  CPU는 PC 가 가르키고 있는 메모리 주소의 instruction을 실행한다.
  인터럽트마다 어떻게 처리해야할지는 OS의 커널에 저장되어 있음.
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="system-call">System Call</h3>

<p>사용자 프로그램이 운영체제의 서비스를 받기 위해 커널 함수를 호출하는 것</p>

<p><strong>하는 이유</strong>  <br />
일반적으로 프로그램은 사용자 모드(mode bit 1? )로 실행한다. 하지만 kernel에 관련된 작업은 커널모드로 전환 후, 실행되어야 한다. 그래서 시스템 콜을 통해 kernel를 통한 작업을 구행하도록 설계되어 있다.</p>

<ul>
  <li>종류
    <ul>
      <li>프로세스 컨트롤
        <ul>
          <li>프로세스 생성 및 종료</li>
          <li>메모리에 로드, 실행</li>
          <li>프로세스 속성 값 확인, 지정</li>
          <li>wait 이벤트, signal 이벤트</li>
          <li>메로리 할당</li>
        </ul>
      </li>
      <li>파일 메니지먼트
        <ul>
          <li>파일 생성, 파일 삭제</li>
          <li>열기, 닫기</li>
          <li>읽기, 쓰기, Reposition</li>
          <li>파일 속성 값 확인, 지정</li>
        </ul>
      </li>
      <li>디바이스 매니지먼트
        <ul>
          <li>디바이스 요청 및 해제</li>
          <li>읽기, 쓰기, Reposition</li>
          <li>디바이스 속성 확인, 지정</li>
          <li>비 물리적인 디바이스 해제 및 장착</li>
        </ul>
      </li>
      <li>정보 관리
        <ul>
          <li>시간 확인, 시간 지정</li>
          <li>시스템 데이터 확인, 지정</li>
          <li>프로세스, 파일, 디바이스 속성 가져오기</li>
          <li>프로세스, 파일, 디바이스 속성 설정하기</li>
        </ul>
      </li>
      <li>커뮤니케이션
        <ul>
          <li>커뮤니케이션 연결 생성 및 삭제</li>
          <li>메시지 송신, 수신</li>
          <li>상태 정보 전달</li>
          <li>remote 디바이스 해제 및 장착</li>
        </ul>
      </li>
      <li>보안
        <ul>
          <li>Permission 획득</li>
          <li>Permission 설정</li>
        </ul>
      </li>
    </ul>

    <p>출처(<a href="https://fjvbn2003.tistory.com/306">https://fjvbn2003.tistory.com/306</a>)</p>
  </li>
</ul>

<h3 id="동기식-입출력과-비동기식-입출력">동기식 입출력과 비동기식 입출력</h3>

<p><strong>동기식 입출력</strong></p>

<ul>
  <li>입출력을 요청한 프로세스가 입출력이 종료될 때까지 대기
    <ul>
      <li>구현방법
        <ol>
          <li>I/O 가 완료될 때까지 CPU를 낭비, 계속 CPU hold</li>
          <li>다른 프로세스에게 CPU 넘겨줌 → 일반적인 구현</li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<p><strong>비동기식 입출력</strong></p>

<ul>
  <li>대기하지 않고 바로 CPU 점유(명령어 실행)</li>
  <li>I/O가 시작된 후 입출력 작업이 끝나기를 기다리지 않고 제어가 사용자 프로그램에 즉시 넘어감</li>
</ul>

<p>두 경우 모두 I/O의 완료는 인터럽트로 알려줌</p>

<p><img src="/assets/images/posts/os/2022-03-11-e.png" alt="동기/비동기식 입출력" /></p>

<h3 id="dma--direct-memory-access">DMA ( Direct Memory Access)</h3>

<p>특정 하트웨어 하위 시스템이 CPU 와는 독립적으로 메인 시스템 메모리에 접근할 수 있게 해주는 컴퓨터 시스템의 기능.</p>

<p><em>주변 장치의 데이터는 장치 컨트롤러에 의해 로컬 버퍼로 이동한다.</em>
<em>그러나 전송할 데이터가 많은 경우, 많은 양의 데이터의 이동으로 인한 부담이 커지는데</em>
<em>이러한 문제를 해결하기 위해 DMA를 이용한다.</em></p>

<p><em>device controller가 데이터의 한 블록을 이동시키는데 이 과정에서 DMA로 인해 CPU의</em>
 <em>개입이 필요없게 된다. CPU에서는 데이터 이동이 완료되었다는 단 한 번의 인터럽트만</em>
 <em>발생한다. 데이터가 전송되는 동안 CPU는 다른 작업을 수행할 수 있게 되어 효율성이 높아진다.</em></p>

<ul>
  <li>빠른 입출력 장치를 메모리에 가까운 속도로 처리하기 위해 사용</li>
  <li>CPU의 중재없이 device controller가 device의 buffer storage의 내용을 메모리에 block 단위로 직접 전송</li>
  <li>바이트 단위가 아니라 block 단위로 인터럽트를 발생시킴</li>
  <li>DMA도 memory에 직접 접근 가능</li>
  <li>너무 잦은 인터럽트 발생을 DMA 가 컨트롤 → CPU가 효율적으로 동작하기 위함</li>
</ul>

<h3 id="서로-다른-입출력-명령어">서로 다른 입출력 명령어</h3>

<ol>
  <li>
    <p>I/O를 수행하는 special instruction에 의해 (일반적인 방법)</p>

    <p>메모리 접근 따로, I/O 접근 따로</p>
  </li>
  <li>
    <p>Memory Mapped I/O에 의해</p>

    <p>메모리 접근을 하지만, 주소값에 따라 메모리와 I/O를 구분</p>
  </li>
</ol>

<h3 id="저장장치-계층-구조">저장장치 계층 구조</h3>

<p><img src="/assets/images/posts/os/2022-03-11-f.png" alt="저장장치 계층 구조" /></p>

<p><br />
<br /></p>

<hr />

<p><br />
<br /></p>

<blockquote>
  <p>참고 <br />
    <a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">KOCW 이화여자대학교 2014 반효경 교수님</a></p>
</blockquote>
:ET