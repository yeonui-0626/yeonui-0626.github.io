I"t<h2 id="백준-9252-번-lcs2-최장-공통-부분-수열-dp">백준 9252 번 LCS2 (최장 공통 부분 수열, DP)</h2>

<p><a href="https://www.acmicpc.net/problem/9252">문제보기</a></p>

<h2 id="1-문제-풀이">1. 문제 풀이</h2>

<h3 id="lcs">LCS</h3>
<p><strong>Longest Common Subsequence, 최장 공통 부분 수열</strong></p>
<ul>
  <li>두 수열이 주어졌을 때, 부분 수열 중, 가장 긴 수열을 찾는 문제이다.</li>
  <li>문제의 예제로 확인해보자
    <ul>
      <li><strong>ACA</strong>Y<strong>K</strong>P</li>
      <li>C<strong>A</strong>P<strong>CAK</strong></li>
      <li>두 수열의 LCS는 ACAK다 된다.</li>
    </ul>
  </li>
  <li>LCS를 구하는 알고리즘은 DP를 이용하고 이전까지의 LCS 값을 이용한다.</li>
</ul>

<h3 id="lcs-dp-배열">LCS DP 배열</h3>
<ul>
  <li>수열 <code class="language-plaintext highlighter-rouge">ACAYKP(str1)</code> 를 기준으로 <code class="language-plaintext highlighter-rouge">CAPCAK(str2)</code>의 문자를 하나하나 살펴보며 LCS를 구해보자</li>
  <li>일단 점화식이 모든 배열에서 성립하게 하기 위해 0인덱스는 0으로 둔다.
  <img src="/assets/images/posts/algo/22-04-18-1.jpg" alt="Untitled" /></li>
  <li>str2의 문자와 str1의 문자와 겹치는 지 확인하여 겹친다면 표시한다.
    <ul>
      <li>한 줄을 완성하게 되면 str1과 str2의 c 의 LCS 길이가 나온다.
<img src="/assets/images/posts/algo/22-04-18-2.jpg" alt="Untitled" /></li>
    </ul>
  </li>
  <li>위와 같은 방법으로 배열을 채운다.
    <ul>
      <li>공통된 부분이 나타났다면 대각선 + 1</li>
      <li>공통된 부분이 아니라면 (i-1,j)와  (i,j-1) 중 더 큰 값을 가져온다.
<img src="/assets/images/posts/algo/22-04-18-3.jpg" alt="Untitled" /></li>
    </ul>
  </li>
  <li>이렇게 완성된 배열은 다음과 같다.
    <ul>
      <li>배열의 제일 마지막칸이 두 수열의 LCS 길이이다.
<img src="/assets/images/posts/algo/22-04-18-4.jpg" alt="Untitled" /></li>
    </ul>
  </li>
</ul>

<h3 id="점화식">점화식</h3>
<ol>
  <li>공통된 부분이 나타났다면 대각선 + 1</li>
  <li>공통된 부분이 아니라면 (i-1,j)와  (i,j-1) 중 더 큰 값을 가져온다.
    <ul>
      <li>배열을 채우는 이 두 부분을 점화식을 코드로 나타내면 아래와 같다.</li>
    </ul>
  </li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">str1</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">str2</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">?</span> <span class="n">dp</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">max</span>
</code></pre></div></div>

<h3 id="lcs-역추척">LCS 역추척</h3>
<ul>
  <li>위의 그림에서 행마다 처음으로 대각선 + 1 이 된 부분이 str2에 나타나는 공통 문자의 위치가 된다.</li>
  <li>마지막 칸부터 역행하며 공통 문자를 찾아야한다.</li>
  <li>문자를 찾았다면 그 이전의 문자는 현재 행,열보다 작은 부분에서 찾아야한다.</li>
  <li>위의 그림을 예로 들면
    <ul>
      <li>마지막 행에서 map[6][5]=4 에서 마지막 문자를 찾고, 그 이전 문자를 찾으려고 할때,</li>
      <li>공통된 문자열을 발견해 대각선 + 1 되어 3이 된 칸이 2개 존재한다.
        <ul>
          <li>=&gt; map[5][3] , map[3][6]</li>
        </ul>
      </li>
      <li>마지막 문자를 (5,6) 에서 찾았으므로 행,열 모두 작은 값을 가지는 map[5][3]이 이어지는 문자열이다.</li>
    </ul>
  </li>
  <li>사실 이걸 DP로 푸는 방법을 생각해내기는 어렵다.</li>
  <li>점화식을 이해하고 배열을 직접 그려보며 알고리즘을 이해하는 것이 좋을 것이다.</li>
</ul>

<p>`</p>

<h2 id="2-시행착오">2. 시행착오</h2>

<h2 id="3-코드">3. 코드</h2>

<script src="https://gist.github.com/yeonui-0626/0aaa0abcdfc0b1e0cc7f9d69d84ddddc.js"></script>

:ET