I"1<h2 id="백준-1149-번-rgb거리">백준 1149 번 RGB거리</h2>

<p><a href="https://www.acmicpc.net/problem/1149">문제보기</a></p>

<h3 id="1-문제-풀이">1. 문제 풀이</h3>

<p>어떤 걸 선택 하느냐?의 문제</p>

<p>3개 중 한개를 골라야한다. <br />
고를 때는 어떤게 최소 비용의 선택인지 알 수 없다. <br />
(현재 선택할 수 있는 값 중 최소를 선택했다고 하더라도 누적합이 최소가 아닐 수도 있다.) <br />
그래서 3가지의 경우를 모두 고려해야하고 이전의 선택을 고려해야한다.</p>

<ol>
  <li>첫번째 색을 고르는 경우 -&gt; <code class="language-plaintext highlighter-rouge">dp[i][0]</code></li>
  <li>두번째 색을 고르는 경우 -&gt; <code class="language-plaintext highlighter-rouge">dp[i][1]</code></li>
  <li>세번째 색을 고르는 경우 -&gt; <code class="language-plaintext highlighter-rouge">dp[i][2]</code></li>
</ol>

<p>현재 색을 선택할 때,</p>
<ol>
  <li><strong>현재 색을 제외한 나머지 색을 이전에 선택한 경우 중, 누적합이 최소인 것을 선택한다.</strong>  <br />
=&gt; <code class="language-plaintext highlighter-rouge">Math.min(dp[i-1][1] ,dp[i-1][2])</code> // 가능할 이전 선택들의 누적합을 비교</li>
  <li><strong>최소 누적합을 선택하고 현재 비용을 더한다.</strong>
    <ul>
      <li><strong>이 값이 곧 i번째 집에 0을 선택했을 경우의 최소 누적합이다.</strong>  <br />
=&gt; <code class="language-plaintext highlighter-rouge">dp[i][0] = Math.min(dp[i-1][1] ,dp[i-1][2]) + arr[i][0]</code></li>
    </ul>
  </li>
</ol>

<ul>
  <li>예시)
 3번째 집을 0번째 색으로 칠하는 경우를 생각해보자.
    <ul>
      <li><strong>i = 3, 선택할 색 : 0</strong>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">dp[2][color]</code> 에는 두번째 집에서 color(0&lt;=color&lt;=2)번째 색을 골랐을 경우의 최소 누적합이 저장되어있을 것이다.</li>
          <li>현재 집은 0번째를 선택해야하므로 이전에 0의 선택한 값을 고려할 필요가 없다.</li>
          <li>그래서 이전에 1번과 2번을 선택한 경우 중 최소값에 현재 집을 칠하는 비용을 합하여 저장한다.  <br />
<code class="language-plaintext highlighter-rouge">dp[3][0] = Math.min(dp[2][1] ,dp[2][2]) + arr[3][0]  </code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="시행착오">시행착오</h4>
<ul>
  <li>모든 경우를 탐색해야한다고 완전탐색을 쓰면 시간초과가 뜰 것이다. DP 로 풀으라고 준 문제!</li>
</ul>

<p><span style="background-color:#fff5b1"></span></p>

<h3 id="2-코드">2. 코드</h3>

<script src="https://gist.github.com/yeonui-0626/4257609c7ada83e103c7928209bdb9b5.js"></script>

:ET