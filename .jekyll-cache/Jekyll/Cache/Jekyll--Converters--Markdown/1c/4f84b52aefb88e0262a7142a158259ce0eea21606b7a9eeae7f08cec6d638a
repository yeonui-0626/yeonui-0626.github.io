I"8<h2 id="백준-2239-번-스도쿠">백준 2239 번 스도쿠</h2>

<p><a href="https://www.acmicpc.net/problem/2239">문제보기</a></p>

<h3 id="1-문제-풀이">1. 문제 풀이</h3>

<p>스도쿠의 빈칸을 채우는 문제 !   <br />
우리가 아는 스도쿠의 규칙와 동일하다.  <br />
스도쿠를 완성하는 경우가 여러개 일수도 있는데 이 문제에서는 사전순으로 앞선 것을 출력하면 된다.  <br />
문제에서는 81자리 수가 제일 작은 경우를 출력하라고 나와있는데,   <br />
이 때, 81자리 수는 9 X 9의 수도쿠를 일렬로 나열했을 때 나오는 수를 말한다.   <br />
즉, 칸을 채울 때 작은 수 먼저 채우면 된다는 말이다.</p>

<ul>
  <li>함수
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudoku(int r, int c)</code> : 한 칸씩 탐색하여 빈칸을 채울 main logic</li>
      <li><code class="language-plaintext highlighter-rouge">emptyCount(int r)</code> : r 행의 빈칸수 return</li>
      <li><code class="language-plaintext highlighter-rouge">rowCheck(int r, int n)</code> : r행에 n이 들어갈 수 있으면 true</li>
      <li><code class="language-plaintext highlighter-rouge">colCheck(int c, int n)</code> : c열에 n이 들어갈 수 있으면 true</li>
      <li><code class="language-plaintext highlighter-rouge">boxCheck(int r, int c , int n)</code> : (r,c) 가 포함된 3 X 3 박스에 n이 들어갈 수 있으면 true</li>
    </ul>
  </li>
</ul>

<ol>
  <li><strong>해당 줄</strong>에 빈칸이 있는지 확인
    <ol>
      <li>빈칸이 없고 마지막 줄이면 탐색 종료 <strong>=&gt; 스도쿠 완성 !</strong></li>
      <li>빈칸이 없고 마지막 줄이아니면 다음줄 채우러 go -&gt; <code class="language-plaintext highlighter-rouge">sudoku(r + 1, 0)</code>
        <ul>
          <li>이 때, 다음 줄을 채우고 온 값이 true이면 스도쿠 완성이므로 true 리턴</li>
          <li>아니라면 다시 돌아가서 다시 열을 채울 수 있도록 false 리턴</li>
          <li><strong>안해도 false가 리턴되지만 하면 더 빨리return 가능</strong></li>
        </ul>
      </li>
      <li>빈칸이 있는데 마지막 col이라면 다시 채우기 위해 false 리턴</li>
    </ol>
  </li>
  <li><strong>해당 칸</strong>이 빈칸인지 확인
    <ol>
      <li>빈칸이라면 n(1부터 9까지)을 확인하며 해당 숫자를 넣을 수 있는지 확인
        <ul>
          <li>이 떄, <code class="language-plaintext highlighter-rouge">rowCheck(int r, int n),  colCheck(int c, int n), boxCheck(int r, int c , int n)</code>을 사용.</li>
        </ul>
        <ol>
          <li>넣을 수 있다면 다음 col 확인 -&gt; <code class="language-plaintext highlighter-rouge">sudoku(r,c+1)</code></li>
          <li>넣을 수 없다면 다음 n 확인</li>
        </ol>
      </li>
      <li>빈칸이 아니라면 다음 col 확인 -&gt; <code class="language-plaintext highlighter-rouge">sudoku(r,c+1)</code></li>
    </ol>
  </li>
</ol>

<h3 id="2-시행착오">2. 시행착오</h3>
<ul>
  <li>함수의 리턴 값 활용하기
    <ul>
      <li><code class="language-plaintext highlighter-rouge">sudoku</code> 함수를 이용해 DFS 처럼 탐색하도록 구현했다. 이 때, return 값의 boolean으로 두어 스도쿠가 완성되면 true를 리턴하여 앞의 함수 stack에게 알려주는 방식을 이용했는데, return 할 케이스들을 모두 고려하지 못해서 계속 오답이 나왔다.
        <ul>
          <li>아직 헷갈리긴하지만,,,, 더 연습해야할 것 같다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>한 줄씩 확인
    <ul>
      <li>처음에 <code class="language-plaintext highlighter-rouge">sudoku</code> 를 구현할 때, 현재 row만 확인하고 다 채우면 함수를 완전히 빠져나가서 다시 <code class="language-plaintext highlighter-rouge">sudoku</code>를 불러 다음 row를 확인하도록 했는데 이 방법이 잘못됬었다.</li>
      <li>이전 row의 값이 어떨지에 따라 앞의 row 값들이 정해지기 때문에 하나의 함수 stack에서 연쇄적으로 처리하도록 해주어야한다.</li>
    </ul>
  </li>
  <li>초기화
    <ul>
      <li>해당 칸에 n을 넣어서 수도쿠를 완성하지 못했다면 다른 값을 채워야한다.</li>
      <li>그러기위해서는 다시 0으로 셋팅 해야 그 칸을 다시 확인함 !</li>
    </ul>
  </li>
</ul>

<h3 id="3-코드">3. 코드</h3>

<script src="https://gist.github.com/yeonui-0626/c0b8bec09355f1b4ced4392223de99f9.js"></script>

:ET