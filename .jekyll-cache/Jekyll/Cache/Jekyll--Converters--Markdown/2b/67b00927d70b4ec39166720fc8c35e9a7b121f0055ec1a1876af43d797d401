I",<h2 id="chapter8-memory-management-1">Chapter8. Memory Management (1)</h2>

<h2 id="주소-공간">주소 공간</h2>

<p>✅ 프로그램이 실행을 위해 메모리에 적재되면 그 프로세스를 위한 독자적인 주소 공간이 생성된다.</p>

<h3 id="논리적-주소가상주소">논리적 주소(가상주소)</h3>

<p>✅ 프로세스마다 독립적으로 가지는 주소 공간</p>

<ul>
  <li>각 프로세스마다 0번지부터 시작</li>
  <li>CPU가 보는 주소가 logical address이다.</li>
</ul>

<h3 id="물리적-주소">물리적 주소</h3>

<p>✅ 메모리에 실제 올라가는 위치</p>

<ul>
  <li>낮은 영역에는 운영체체가 올라가고 높은 주소 영역에는 사용자 프로세스들이 올라간다.</li>
</ul>

<h3 id="주소-바인딩">주소 바인딩</h3>

<p>✅ 프로그램의 논리적 주소로 물리적 메모리 주소를 결정하는 것</p>

<ul>
  <li>주소변환 순서
    <ul>
      <li>Sysmbolic Address → <strong>Logical Address → Physical address</strong></li>
    </ul>
  </li>
</ul>

<h2 id="주소-바인딩-1">주소 바인딩</h2>

<p>✅ 각 프로그램이 가진 논리적인 주소가 언제 물리적인 주소로 바뀌는가</p>

<h3 id="1-compile-time-binding">1. Compile time binding</h3>

<ul>
  <li>컴파일시 물리적 주소로 바뀜</li>
  <li>컴파일러가 절대코드(absolute) 생성.</li>
  <li>다른 메모리 위치에 올리고 싶다면 컴파일을 다시 해야함.</li>
</ul>

<h3 id="2-load-time-binding">2. Load time binding</h3>

<ul>
  <li>프로그램이 시작될 때</li>
  <li>비어있는 메모리 공간을 찾고 그 곳에 할당</li>
  <li>컴파일러가 재배치 가능 코드를 생성한 경우 재배치 가능</li>
  <li>주소에 숫자를 더하는 방식</li>
</ul>

<h3 id="3-excution-time-bindingrun-time-binging">3. Excution time binding(=Run time binging)</h3>

<ul>
  <li>프로세스가 시작된 이후에도 그 프로세스의 메모리 상 위치를 옮길 수 있는 방식.</li>
  <li>메모리 공간에서 쫒겨나는 경우</li>
  <li>CPU가 주소를 참조 할 때마다 address mapping table을 통해 메모리의 어디에 존재하는지 바인딩을 점검</li>
  <li>하드웨적인 지원이 필요함  ⇒ <strong>MMU</strong></li>
</ul>

<h2 id="mmu">MMU</h2>

<ul>
  <li>Memory-Management Unit</li>
</ul>

<p>✅ 논리적 주소를 메모리의 물리적 주소로 변환하는 하드웨어</p>

<ul>
  <li>레지스터 2개
    <ul>
      <li>운영체제 및 사용자 프로세스 간의 메모리 보호를 위해 사용하는 레지스터</li>
      <li>base register : 기준 레지스터, 재배치 레지스터(relocation register)
        <ul>
          <li>물리적 메모리의 시작 주소</li>
        </ul>
      </li>
      <li>limit register : 한계 레지스터
        <ul>
          <li>자신의 주소 공간을 넘어서는 메모리 접근을 막히 위해</li>
          <li>만약 벗어난 다면 trap (software interrupt)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="mmu-기법mmu-scheme">MMU 기법(MMU scheme)</h3>

<ul>
  <li>사용자 프로세스가 CPU에서 수행되며 생성해내는 모든 주소값에 대해 base register의 값을 더한다.</li>
</ul>

<h2 id="용어">용어</h2>

<h3 id="dynamic-relocation">Dynamic Relocation</h3>

<p><img src="/assets/images/posts/os/2022-04-11-os-8-7.png" alt="Dynamic Relocation" /></p>

<ul>
  <li>프로세스가 통째로 메모리에 올라감</li>
  <li>시작위치를 저장</li>
  <li>논리주소 346+ 시작위치  14000 ⇒ 실제 저장위치</li>
  <li><strong>limit register 로 참조할 수 있는 범위내에 있는지 확인</strong>
    <ul>
      <li>범위 내에 있지 않다면 interrupt 발생</li>
    </ul>
  </li>
</ul>

<h3 id="dynamic-loading">Dynamic Loading</h3>

<p>✅ 프로세스 전체를 메모리에 미리 다 올리는 것이 아니라 <strong>해당 루틴이 불려질 때 메모리에 load 하는 것</strong></p>

<ul>
  <li>프로그램은 방어적으로 이루어지기 때문에 프로그램의 상당 부분은 사용되지 않는다. 이 부분까지 통재로 메모리에 올리는 것은 비효율적이다.</li>
  <li>페이징과(운영체제가 하는 것)는 다름, Dynamic Loading은 프로그래머가 하는 작업.</li>
  <li>프로그래머가 쉽게 Dynamic loading을 처리하기 위해 운영체제는 라이브러리를 지원한다.</li>
  <li>운영체제가 알아서 하는 것도 Dynamic Loading이라고 한다.</li>
</ul>

<h3 id="overlays">Overlays</h3>

<p>✅ 메모리에 프로세스의 필요한 부분만 적재하는 기법</p>

<ul>
  <li>프로세스의 크기가 메모리보다 클 때 유용</li>
  <li>동적 로딩이랑 비슷해보이지만 작은 공간의 메모리를 사용하던 초장기 시스템에서 메모리보다 크기가 큰 프로세스를 실행하기 위해 프로그래머가 수작업으로 구현하는 기법</li>
  <li>운영체제의 지원없이 사용자에 의해 구현
    <ul>
      <li>Manual Overlay - 프로그래밍 매우 복잡</li>
    </ul>
  </li>
</ul>

<p><a href="https://yiyj1030.tistory.com/78">참고블로그</a></p>

<h3 id="swapping">Swapping</h3>

<p>✅  프로세스를 일시적으로 메모리에서 backing store(디스크)로 쫒아내는 것</p>

<ul>
  <li>프로그램의 일부 페이지만 메모리에서쫓겨나도 스왑아웃이라고 하기도함</li>
</ul>

<p><strong>Backing store = swap area</strong></p>

<ul>
  <li>많은 사용자의 프로세스 이미지를 담을 만큼 충분히 빠르고 큰 저장 공간</li>
</ul>

<p><strong>Swap in / Swap out</strong></p>

<ul>
  <li>일반적으로 중기 스케줄러에 의해 swap out 시킬 프로세스 선정
    <ul>
      <li>우선순위가 낮은프로세스를 swap out</li>
    </ul>
  </li>
  <li>complie time binding 혹은 load time binding에서는 원래 메모리 위치로  swap in 해야함</li>
  <li>Excution time binding에서는 추후 빈 메모리 영역 아무 곳에나 올릴 수 있음</li>
  <li>swap time 대부분 transfer time(swap 되는 양에 비례하는 시간)임</li>
</ul>

<p><img src="/assets/images/posts/os/2022-04-11-os-8-8.png" alt="swapping" /></p>

<h3 id="dynamic-linking">Dynamic Linking</h3>

<p>✅ Linking을 실행 시간까지 미루는 기법</p>

<p><strong>Static linking</strong></p>

<ul>
  <li>라이브러리가 프로그램의 실행 파일 코드에 포함됨</li>
  <li>실행 파일의 크기가 커짐</li>
  <li>동일한 라이브러리를 각각의 프로세스가 메모리에 올리므로 메모리 낭비</li>
  <li></li>
</ul>

<p><strong>Dynamic linking</strong></p>

<ul>
  <li>라이브러리가 내 코드에  포함되어 있지 않음</li>
  <li>라이브러리 호출하는 부분에서 그 라이브러리가 어디있는지 찾음
    <ul>
      <li>라이브러리 루틴의 위치를 찾기위한 stub이라는 작은 코드를 둠.</li>
    </ul>
  </li>
  <li>Dynamic Linking을 해주는 라이브러리를 shared library 라고함</li>
</ul>

<h2 id="물리적-메모리-할당-방식">물리적 메모리 할당 방식</h2>

<h3 id="사용자-프로세스-영역의-할당-방법">사용자 프로세스 영역의 할당 방법</h3>

<ol>
  <li>
    <p><strong>Contiguous allocation</strong></p>

    <p>각 프로세스가 <strong>연속된 메모리 공간에</strong> 할당되어 있음</p>

    <ul>
      <li>Fixed Partition allocation
        <ul>
          <li>미리 공간 나뉘어 있음</li>
          <li>내부&amp;외부 단편화 존재</li>
        </ul>
      </li>
      <li>Variable partitoin allocation
        <ul>
          <li>프로세스 크기만큼씩 할당</li>
          <li>외분 단편화 존재</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Non-Contiguous allocation</strong></p>

    <p>하나의  프로세스가 <strong>메모리의 여러 영역에 분산되어 올라갈 수 있음</strong></p>

    <ul>
      <li>Paging</li>
      <li>Segmentation</li>
      <li>Paged Segmentation</li>
    </ul>
  </li>
</ol>

<h2 id="연속-할당-contiguous-allocation">연속 할당 Contiguous Allocation</h2>

<h3 id="고정-분할-방식">고정 분할 방식</h3>

<ul>
  <li><strong>물리적 메모리를 몇 개의 영구적 분할로 나눔</strong></li>
  <li>분할의 크기가 모두 동일한 방식과 서로 다른 방식이 존재</li>
  <li>분할당 하나의 프로그램을 적재한다.</li>
  <li>동시에 메모리에 올릴 수 있는 프로그램의 수가 고정된다.</li>
  <li>최대 수행 가능 한 프로그램 크기가 제한된다.</li>
  <li>내부 단편화 &amp; 외부 단편화 발생</li>
</ul>

<h3 id="가변-분할-방식">가변 분할 방식</h3>

<ul>
  <li>프로그램의 크기에 따라 <strong>분할의 크기, 개수가 동적으로 변함</strong></li>
  <li>기술적 관리 기법이 필요</li>
  <li>외부 단편화 발생</li>
</ul>

<p><strong>외부 단편화 External Fragmentation</strong></p>

<ul>
  <li>프로그램이 들어가지 못하고 남는 조각</li>
</ul>

<p><strong>내부 단편화 Internal Fragmentation</strong></p>

<ul>
  <li>그 위치에 프로그램을 할당하고 남는 조각</li>
</ul>

<h3 id="hole">Hole</h3>

<ul>
  <li>가용 메모리 공간</li>
  <li>비어 있어 프로그램이 올라갈 수 있는 메모릭 공간</li>
  <li>프로세스가 도착하면 수용가능한 hole을 할당</li>
  <li>운영체제는 저장공간의 정보를 저장하고 있어야함.
    <ul>
      <li>할당 공간</li>
      <li>가용 공간</li>
    </ul>
  </li>
</ul>

<h3 id="가변-분할-방식-문제점">가변 분할 방식 문제점</h3>

<p>✅ 가변 분할 방식에서 size n 인 요청을 만족하는 가장 적잘한 hole을 찾는 문제</p>

<ol>
  <li>First-Fit
    <ul>
      <li>size가 n 이상인 것 중 최초로 찾아지는 hole에 할당</li>
    </ul>
  </li>
  <li>Best-fit
    <ul>
      <li>size 가 n이상인 가장 작은 hole을 찾아 할당</li>
      <li>모든 hole의 리스트를 탐색해야함</li>
      <li>많은 수의 아주 작은 hole 생성</li>
    </ul>
  </li>
  <li>Worst-fit
    <ul>
      <li>가장 큰 hole 할당</li>
      <li>모든 hole리스트를 탐색해야함.</li>
      <li>상대적으로 큰 hole 생성</li>
    </ul>
  </li>
</ol>

<h3 id="compaction">compaction</h3>

<p>✅ 가변 분할 반식에서 외부 단편화 문제를 해결하는 방법</p>

<ul>
  <li>사용중인 메모리 영역을 한군데로 몰고 hole들을 다른 한 곳으로 몰아 큰 block 을 만드는 것.</li>
  <li>매우 비용이 많이 들고 복잡</li>
  <li>런타임 바인딩이 지원되어야함.</li>
</ul>

<p><br />
<br /></p>

<hr />

<p><br />
<br /></p>

<blockquote>
  <p>참고 <br />
<a href="http://www.kocw.net/home/search/kemView.do?kemId=1046323">KOCW 이화여자대학교 2014 반효경 교수님</a>   <br />
<a href="https://yiyj1030.tistory.com/78">참고블로그1</a>  <br />
<a href="https://velog.io/@huttels/%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC#%EB%AC%BC%EB%A6%AC-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC">참고블로그2</a></p>
</blockquote>
:ET